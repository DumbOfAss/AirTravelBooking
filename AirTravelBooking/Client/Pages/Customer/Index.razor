@page "/Customers"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

@if (Customers == null)
{
    <div class="alert alert-info">Loading Customers...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Password</th>
                <th>Address</th>
                <th>Contact</th>
                <th>Payment</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Customers)
            {
            <tr>
                <td>@customer.Name</td>
                <td>@customer.Password</td>
                <td>@customer.Address</td>
                <td>@customer.Contact</td>
                <td>@customer.Payment</td>
                <td>
                    <a href="/customers/view/@customer.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/customers/view/@customer.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(() => Delete(customer.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Customer> Customers;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{EndPoints.CustomersEndPoint}");
    }

    async Task Delete(int CustomerId)
    {
        var customer = Customers.First(q => q.Id == CustomerId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {customer.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{EndPoints.CustomersEndPoint}/CustomerId");
            await OnInitializedAsync();
        }
    }
}
