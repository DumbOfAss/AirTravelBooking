@page "/Bookings"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3>Bookings</h3>

<a href="/Bookings/Create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Booking
</a>
<br />
<br />

@if (Bookings == null)
{
    <div class="alert alert-info">Loading Bookings...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Destination</th>
                <th>Airplane Model</th>
                <th>Priority</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in Bookings)
            {
                <tr>
                    <td>@booking.Customer.Name</td>
                    <td>@booking.Destination.Name</td>
                    <td>@booking.Airplane.Model</td>
                    <td>@booking.Priority.Name</td>
                    <td>
                        <a href="/Bookings/view/@booking.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Bookings/edit/@booking.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(booking.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Booking> Bookings;

    protected async override Task OnInitializedAsync()
    {
        Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{EndPoints.BookingsEndPoint}");
    }

    async Task Delete(int BookingId)
    {
        var booking = Bookings.First(q => q.Id == BookingId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {booking.Destination.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{EndPoints.BookingsEndPoint}/BookingId");
            await OnInitializedAsync();
        }
    }
}
